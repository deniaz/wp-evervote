<?php

include_once('sessionlog.php');
include_once('votetracker.php');

/**
 * EverVote Class
 *
 * The EverVote Class is the plugin's core. It handles script queues, ajax callbacks,
 * security and single-vote checks, and stores the meta data.
 *
 * @author Robert Vogt <robert.vogt@mind.ch>
 * @package mind
 * @subpackage evervote
 * @copyright Copyright 2012 MIND Kommunikation GmbH <www.mind.ch>
 * @version 0.1
 */
class EverVote
{

    /**
     * Plugin Directory Path (/var/www/user/wp-content/plugins/evervote)
     * 
     * Generated by plugin_dir_path()
     * 
     * @var string $pluginBaseDir
     */
    private $pluginBaseDir;

    /**
     * Plugin Directory URL (/wp-content/plugins/evervote)
     *
     * Generated by plugin_dir_url()
     *
     * @var string $pluginBaseUrl
     */
    private $pluginBaseUrl;

    /**
     * Meta Key for a post's meta data
     *
     * @var string META_KEY
     */
    const META_KEY = 'evervotes';

    /**
     * EverVote Constructor
     *
     * Adds Action display_evervote, which can be used in a template like:
     *
     * <code>
     * do_action('display_evervote');
     * </code>
     *
     * @param string $pluginBaseDir Assign plugin_dir_path(__FILE__) only.
     * @param string $pluginBaseUrl Assign plugin_dir_url(__FILE__) only.
     */
    public function __construct($pluginBaseDir, $pluginBaseUrl)
    {
        $this->pluginBaseDir = $pluginBaseDir;
        $this->pluginBaseUrl = $pluginBaseUrl;

        add_action('display_evervote', array(&$this, 'display'), 1, 1);

        /**
         * I know that wp_enqueue_scripts is the *correct* hook to use, 
         * but it's not being executed. So fuck it, will to it on init!
         */
        add_action('init', array(&$this, 'includeScripts'));
    }

    /**
     * Enqueues evervote.js and generates global NameSpace for AJAX URL
     *
     * @return void
     */
    public function includeScripts()
    {
        wp_enqueue_script(
            'evervote-js',
            $this->pluginBaseUrl . 'javascript/evervote.min.js',
            '1.0'
            );

        wp_localize_script(
            'evervote-js',
            'EverVoteConfig',
            array(
                'ajaxUrl' => admin_url('admin-ajax.php'),
                'everVoteNonce' => wp_create_nonce('evervote-nonce')
                )
            );

        add_action('wp_ajax_evervote', array(&$this, 'ajaxCallback'));
        add_action('wp_ajax_nopriv_evervote', array(&$this, 'ajaxCallback'));
    }

    /**
     * Includes the template to display a button and a vote on page load
     * 
     * @todo Implement Theme-Override
     * @return void
     */
    public function display()
    {
        global $post;

        $postName = get_the_title();
        $postID = get_the_ID();

        $meta = get_post_meta($postID, self::META_KEY);
        $evervotes = 0;

        if (!empty($meta))
        {
            $evervotes =  (int) $meta[0];
        }

        echo "<pre>";
        var_dump($_COOKIE);
        echo "</pre>";
        include_once $this->pluginBaseDir . '/templates/evervote-client.php';
    }

    /**
     * Called by JS
     * 
     * Checks for security breaches, handles data and returns headers and JSON
     * @return void
     */
    public function ajaxCallback()
    {
        $postID = $_POST['postID'];

        $log = SessionLog::getInstance();
        $check = $log->add($_SERVER['REMOTE_ADDR']);

        if (!$check)
        {
            $this->cancelAjax(400);
        }

        $tracker = new VoteTracker($postID);
        $tracker->setIP($_SERVER['REMOTE_ADDR']);
        // TODO: FB & Twitter Integration
        // $tracker->setFacebook(12345);
        // $tracker->setFacebook(67890);

        if ($tracker->hasVote() !== VoteTracker::NO_VOTES)
        {
            $this->cancelAjax(400);
        }

        $tracker->registerIP();

        if (!wp_verify_nonce($_POST['everVoteNonce'], 'evervote-nonce'))
        {
            $this->cancelAjax(400);
        }

        try {
            $votes = $this->increment($postID);
        }
        catch(InvalidArgumentException $e) {
            $this->cancelAjax(400);
        }
        catch (RuntimeException $e) {
            $this->cancelAjax(500);
        }

        header('HTTP/1.1 200 OK');
        header('Content-Type: application/json');
        $json = array(
            'msg' => 'Thanks for voting.',
            'votes' => $votes
        );

        echo json_encode($json);

        exit(0);
    }

    /**
     * Responds to AJAX Request with error code
     * 
     * @param int $status HTTP Error Status
     * @return void
     */
    private function cancelAjax($status)
    {
        switch ($status)
        {
            case 400:
            header('HTTP/1.1 400 Bad Request');
            break;

            case 500:
            header('HTTP/1.1 500 Internal Server Error');
            break;

            default:
            header('HTTP/1.1 500 Internal Server Error');
            break;
        }

        header('Content-Type: text/plain');
        echo "Something went wrong. Please try again later.";
        exit(0);
    }

    /**
     * Adds meta data or increments existing value
     * 
     * @param id $postID ID of current post
     * @return int new vote-coutn
     */
    private function increment($postID = null)
    {
        if ($postID == null){
            throw new InvalidArgumentException("Post ID can not be NULL.");
        }

        $meta = get_post_meta($postID, self::META_KEY);
        $evervotes = 0;

        if (!empty($meta))
        {
            $evervotes = (int) $meta[0];
            $update = update_post_meta($postID, self::META_KEY, ++$evervotes);

            if ($update)
            {
                return $evervotes;
            }
            else
            {
                throw new RuntimeException("Updating EverVotes failed.");
            }
        }
        else
        {
            $add = add_post_meta($postID, self::META_KEY, 1, true);

            if ($add)
            {
                return 1;
            }
            else
            {
                throw new RuntimeException("Adding EverVotes failed.");
            }
        }

        return -1;
    }
}